alias curr_PID S0;
curr_PID = (PTBR-PAGE_TABLE)/8;
alias curr_PCB S1;
curr_PCB = READY_LIST + 32*curr_PID;
[curr_PCB +1] = 1;
[curr_PCB +2] = BP;
[curr_PCB +3] = SP-1;
alias INDEX S2;
alias OFFSET S3;
alias PAGE S4;
alias ADDR S5;
INDEX = SP/512;
OFFSET = SP%512;
PAGE = [PTBR + 2*INDEX];
ADDR = PAGE*512 + OFFSET;
[curr_PCB +4] = [ADDR];
[curr_PCB +5] = PTBR;
[curr_PCB +6] = PTLR;
[curr_PCB +7] = R0;
[curr_PCB +8] = R1;
[curr_PCB +9] = R2;
[curr_PCB +10] = R3;
[curr_PCB +11] = R4;
[curr_PCB +12] = R5;
[curr_PCB +13] = R6;
[curr_PCB +14] = R7;

alias i S6;
i = (curr_PID + 1)%32;
while (1) do
	curr_PCB = READY_LIST + i*32;
	if ([curr_PCB + 1]==1) then
		break;
	endif;
	i = (i+1)%32;
endwhile;
[curr_PCB + 1] = 2;
BP = [curr_PCB + 2];
SP = [curr_PCB + 3];
PTBR = [curr_PCB + 5];
PTLR = [curr_PCB + 6];
R0 = [curr_PCB + 7];
R1 = [curr_PCB + 8];
R2 = [curr_PCB + 9];
R3 = [curr_PCB + 10];
R4 = [curr_PCB + 11];
R5 = [curr_PCB + 12];
R6 = [curr_PCB + 13];
R7 = [curr_PCB + 14];
SP = SP+1;
INDEX = SP/512;
OFFSET = SP%512;
PAGE = [PTBR + 2*INDEX];
ADDR = PAGE*512 + OFFSET;
[ADDR] = [curr_PCB + 4];
ireturn;
