alias physicalSP S0;
alias filename S1;
alias fat S2;
alias ofti S3;
alias basic_block S4;
alias data_block S5;
alias page S6;
alias PID S7;
alias currentPCB S8;
alias syscallno S9;
alias i S15;

physicalSP = ([PTBR+2*(SP/512)]*512) + (SP%512);
syscallno  = [physicalSP-1];
filename = [physicalSP-3];
PID = (PTBR-PAGE_TABLE)/8;
currentPCB = READY_LIST + 32*PID;

//
//getpid system call
//
if(syscallno==11) then
	[physicalSP-2]=[currentPCB];
	ireturn;
endif;

//
//getppid system call
//
if(syscallno==12) then
	[physicalSP-2] = [currentPCB+31];
	ireturn;
endif;

//
//exec system call
//
//find the file
//exit if not found
//
fat=0;
while(fat<64) do
	if([FAT+8*fat]==filename) then
		break;
	endif;
	fat = fat+1;
endwhile;

if(fat==64) then
	[physicalSP-2]=-1;
	ireturn;
endif;

basic_block = [FAT+8*fat+2];
load(1,basic_block);
i=0;
while(i<3) do
	alias ref S7;
	data_block = [SCRATCHPAD+i];
	page = [PTBR+2*i];
	ref = [PTBR+2*i+1];
	if(ref=="01" || ref=="11") then
		[MEM_LIST+page]=[MEM_LIST+page]-1;
	else
		if(page>=448) then
			[DISK_LIST+page]=[DISK_LIST+page]-1;
		endif;
	endif;
	[PTBR+2*i]=data_block;
	[PTBR+2*i+1]="00";
	i=i+1;
endwhile;
[PTBR+7]="01";

i=0;
while(i<8) do
	ofti = [currentPCB+15+2*i];
	if(ofti==-1) then
		i=i+1;
		continue;
	endif;
	[currentPCB+15+2*i]=-1;
	[currentPCB+15+2*i+1]=-1;
	[FILE_TABLE+2*ofti+1]=[FILE_TABLE+2*ofti+1]-1;
	if([FILE_TABLE+2*ofti+1]==0) then
		[FILE_TABLE+2*ofti]=-1;
	endif;
	i=i+1;
endwhile;

SP=3*512;
physicalSP = ([PTBR+6]*512);
[physicalSP]=0;
ireturn;
