alias physicalSP S0;
alias newPCB S1;
alias ofti S2;
alias currentPCB S3;
alias PID S4;
alias CHPID S5;
alias i S15;

physicalSP = ([PTBR + 2*(SP/512)]*512) + (SP%512);
PID = (PTBR-PAGE_TABLE)/8;
currentPCB = READY_LIST + 32*PID;

//
//find a new PCB
//exit if not available
//
i=(PID+1)%32;
while(i!=PID) do
	newPCB = READY_LIST + 32*i;
	if([newPCB+1]==0) then
		break;
	endif;
	i=(i+1)%32;
endwhile;

if(i==PID) then
	[physicalSP-2]=-1;
	ireturn;
else
	CHPID=i;		//CHPID set to child to PID
endif;

//
//find a free page for stack of new process
//exit if not available
//
i=25;	//will contain stack page number
while(i<64) do
	if([MEM_LIST + i]==0) then
		break;
	endif;
	i=i+1;
endwhile;

if(i==64) then
	[physicalSP-2]=-1;
	ireturn;
else
	[MEM_LIST + i]=1;
endif;

//
//copy page table values
//modify the memory and disk list if needed
//
alias newPTBR S6;
alias j S14;
newPTBR = PAGE_TABLE + 8*CHPID;
j=0;
while(j<3) do
	alias ref S7;
	alias p S8;
	p = [PTBR+2*j];
	[newPTBR+2*j]=p;
	ref = [PTBR+2*j+1];
	[newPTBR+2*j+1]=ref;
	if(ref=="01" || ref=="11") then
		[MEM_LIST+p] = [MEM_LIST+p]+1;
	else
		if(p>=448) then
			[DISK_LIST+p]=[DISK_LIST+p]+1;
		endif;
	endif;
	j=j+1;
endwhile;
[newPTBR+6]=i;
[newPTBR+7]="01";

//
//copy the stack of parent to child
//word by word
//
j=0;
while(j<512) do
	[(i*512)+j]=[([PTBR+6]*512)+j];
	j=j+1;
endwhile;

//
//set up the PCB of the new process
//
[newPCB]=CHPID;
[newPCB+1]=1;
[newPCB+2]=3*512;
[newPCB+3]=SP-1;
[newPCB+4]=[physicalSP];
[newPCB+5]=newPTBR;
[newPCB+6]=4;
[newPCB+7]=R0;
[newPCB+8]=R1;
[newPCB+9]=R2;
[newPCB+10]=R3;
[newPCB+11]=R4;
[newPCB+12]=R5;
[newPCB+13]=R6;
[newPCB+14]=R7;
i=0;
while(i<8) do
	ofti = [currentPCB+15+2*i];
	[newPCB+15+2*i]=ofti;
	[newPCB+15+2*i+1]=[currentPCB+15+2*i+1];
	if(ofti!=-1) then
		[FILE_TABLE+2*ofti+1]=[FILE_TABLE+2*ofti+1]+1;
	endif;
	i=i+1;
endwhile;
[newPCB+31]= PID;

[physicalSP-2]=CHPID;
alias sp S7;
sp = SP-1;
physicalSP = ([newPTBR+2*(sp/512)]*512) + (sp%512);
[physicalSP-1]=-2;
ireturn;
